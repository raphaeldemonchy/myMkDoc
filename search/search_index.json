{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/","title":"RType_docsTable of Contents","text":"[Client](#Client)    [Server](#Server)    [Game-Engine](#Game-Engine)"},{"location":"RTypes_docs/r_type_docs/#_1","title":"RType_docs","text":"<p>back to top</p>"},{"location":"RTypes_docs/r_type_docs/#client","title":"Client","text":"<ul> <li>Introduction</li> <li>User-Interface</li> <li>GameEngine-Integration</li> <li>Mode</li> <li>Multi-Player</li> <li>Single-Player</li> <li>Network-Protocole</li> </ul>"},{"location":"RTypes_docs/r_type_docs/#introduction","title":"Introduction","text":"<pre><code>The client component of this project is the interactive interface through which players engage with the re-created RType arcade game. It serves as the point of access to the gaming experience and facilitates both single-player and multi-player modes. The client is meticulously designed and developed in C++ to provide a user-friendly, immersive, and responsive gaming environment.\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#user-interface","title":"User Interface","text":"<pre><code>The client offers a visually appealing and intuitive user interface that allows players to navigate the game and much more...\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#game-engine-integration","title":"Game Engine Integration","text":"<pre><code>It seamlessly integrates with the modular game engine, ensuring the efficient execution of game mechanics, graphics rendering, and audio effects.\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#mode","title":"Mode","text":"<p>For those who prefer solo gaming you can challenge AI opponents, adding an extra layer of excitement to the gaming experience.</p>"},{"location":"RTypes_docs/r_type_docs/#multi-player","title":"Multi-Player","text":"<p>Players can connect to the server create their lobby and join each others and participate in multiplayer matches, battling together in real-time against AI opponents. The client facilitates communication with the server for synchronized gameplay.</p>"},{"location":"RTypes_docs/r_type_docs/#single-player","title":"Single-Player","text":""},{"location":"RTypes_docs/r_type_docs/#network-protocols","title":"Network Protocols","text":"<p>The client uses a combination of network protocols for seamless gaming. It employs [TCP] for menu navigation, room creation, and other interactions, ensuring data integrity and reliability. During actual gameplay, the client switches to [UDP] for low-latency communication, delivering a responsive and immersive gaming experience.</p> <p>back to top</p>"},{"location":"RTypes_docs/r_type_docs/#_2","title":"RType_docs","text":""},{"location":"RTypes_docs/r_type_docs/#server","title":"Server","text":"<ul> <li>Introduction</li> <li>Protocole-TCP/UDP</li> <li>TCP</li> <li> <p>UDP</p> </li> <li> <p>Rooms</p> </li> </ul>"},{"location":"RTypes_docs/r_type_docs/#protocole-tcpudp","title":"[Protocole-TCP/UDP]","text":"TCP UDP"},{"location":"RTypes_docs/r_type_docs/#rooms","title":"[Rooms]","text":"<p>back to top</p>"},{"location":"RTypes_docs/r_type_docs/#_3","title":"RType_docs","text":""},{"location":"RTypes_docs/r_type_docs/#game-engine-ecs","title":"Game-Engine [ECS]","text":"<ul> <li>[ Structure ] </li> <li>Schema-Layer/subsystem</li> <li>[E]ntity</li> <li>[C]omponents</li> <li>[S]ystems</li> <li>[ Usage] </li> <li>Beginner</li> <li>Advanced</li> </ul>"},{"location":"RTypes_docs/r_type_docs/#structure","title":"[ Structure ]","text":"Schema Layer/subsystem <pre><code>graph LR\n\n        K([SYS-Colision]) --&gt; J{Systems}\n        H([SYS-AI]) --&gt; J{Systems}\n        V([SYS-Weapon]) --&gt; J{Systems}\n\n        J{Systems} --&gt; A[EntityManager]\n\n    A[EntityManager] --&gt; B(Entity-Player)\n    A[EntityManager] --&gt; S(Entity-Mob)\n    A[EntityManager] --&gt; W(Entity-Bullet)\n\n    B --&gt; X{Components}\n    S --&gt; X{Components}\n    W --&gt; X{Components}\n    X --&gt;Y[Health]\n    X --&gt;E[HitBox]\n    X --&gt;F[Position]</code></pre> <pre><code>stateDiagram-v2\n    state GameEngine[ECS] {\n            state Entities {\n                direction LR\n                state Components {\n                    direction LR\n                    state Damage {\n                        direction LR\n                        zzz\n                    }\n                    state Life {\n                        direction LR\n                        yyy\n                   }\n                   state HitBox {\n                        direction LR\n                        xxx\n                   }\n               }\n\n            }\n            state Systems {\n                direction LR\n                state SysRender {\n                    direction LR\n                    1\n                }\n                state SysShoot {\n                    direction LR\n                    2\n                }\n                state SysAI {\n                    direction LR\n                    3\n                }\n            }\n    }</code></pre>"},{"location":"RTypes_docs/r_type_docs/#_4","title":"RType_docs","text":"[E]ntity <p>EntityManager.hpp</p> <pre><code>namespace GameEngine {\n\nclass EntityManager {\npublic:\nEntityManager() {}\n~EntityManager() {}\n\nstd::shared_ptr&lt;Entity&gt;&amp; createEntity();\nstd::shared_ptr&lt;Entity&gt;&amp; addEntity(Entity entity);\nstd::shared_ptr&lt;Entity&gt;&amp; getEntity(unsigned int id);\nvoid deleteEntity(unsigned int id);\n\nstd::list&lt;std::shared_ptr&lt;Entity&gt;&gt;&amp; getEntities();\nstd::list&lt;std::shared_ptr&lt;Entity&gt;&gt; getEntitiesByType(int entityType);\n\n\n\nprivate:\nstd::list&lt;std::shared_ptr&lt;Entity&gt;&gt; _listEntity;\nstd::shared_ptr&lt;Entity&gt; _entityPtr;\n};\n\n}\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#_5","title":"RType_docs","text":"<p>Entity.hpp</p> <pre><code>namespace GameEngine {\nclass Entity {\npublic:\nEntity(unsigned int id, int type) : _id(id), _entityType(type) {}\nEntity(unsigned int id) : _id(id), _entityType(0) {}\n\n~Entity() {}\n\nunsigned int getId() const;\ntemplate &lt;typename T&gt;\nvoid addComponent(T &amp;component);\n\ntemplate &lt;typename T&gt;\nvoid deleteComponent(std::shared_ptr&lt;T&gt; component);\n\ntemplate &lt;typename T&gt;\nstd::shared_ptr&lt;T&gt; getComponentByType(CONFIG::CompType type);\n\ntemplate &lt;typename T&gt;\nstd::shared_ptr&lt;T&gt; getComponentById(int id);\n\ntemplate &lt;typename T&gt;\nstd::list&lt;std::shared_ptr&lt;T&gt;&gt; &amp;getComponents();\n\nint getType() const;\n\nprivate:\nstd::list&lt;std::shared_ptr&lt;IComponent&gt;&gt; _entityContent;\nunsigned int _id;\nint _entityType;\n\n};\n}\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#_6","title":"RType_docs","text":"[C]omponents <p>IComponent.hpp</p> <pre><code>namespace GameEngine {\n\nclass IComponent {\npublic:\nvirtual ~IComponent() = default;\n\nvirtual CONFIG::CompType getType() = 0;\nvirtual void setType(const CONFIG::CompType type) = 0;\nvirtual int getId() = 0;\nvirtual void setId(const int id) = 0;\n};\n}\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#_7","title":"RType_docs","text":"<p>AComponent.hpp</p> <pre><code>namespace GameEngine {\n\nclass AComponent : public IComponent{\npublic:\nAComponent(CONFIG::CompType type) : _type(type) {};\nAComponent(AComponent &amp;component) {\n_type = component.getType();\n_id = component.getId();\n};\n~AComponent() = default;\n\nvirtual CONFIG::CompType getType() {return _type;};\nvirtual void setType(const CONFIG::CompType type) {_type = type;};\nvirtual int getId() {return _id;};\nvirtual void setId(const int id) {_id = id;};\n\nprotected:\nint _id;\nCONFIG::CompType _type;\n};\n}\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#_8","title":"RType_docs","text":"[S]ystems <p>ISystem.hpp</p> <pre><code>namespace GameEngine {\n\nclass ISystem {\npublic:\nvirtual ~ISystem() = default;\nvirtual void update() = 0;\n};\n}\n</code></pre>"},{"location":"RTypes_docs/r_type_docs/#_9","title":"RType_docs","text":"<p>ASystem.hpp</p> <pre><code>namespace GameEngine {\n\nclass ASystem : public ISystem {\npublic:\nASystem(std::shared_ptr&lt;EntityManager&gt; &amp;entityManagerPtr) : _entityRefList(entityManagerPtr){}\nvirtual ~ASystem() = default;\n\nvirtual void update() {};\n\nprotected:\nstd::shared_ptr&lt;EntityManager&gt; &amp;_entityRefList;\n\nprivate:\n};\n}\n</code></pre> <p>back to top</p>"},{"location":"RTypes_docs/r_type_docs/#usage","title":"[ Usage ]","text":"Beginner <ul> <li> <p>Create new map for RType</p> <p>This is a good example of a modification to help you understand the code as a whole.  The procedure for creating a new map is available in a dedicated CONFIG_MAP.md </p> </li> </ul> <p></p> Advanced <ul> <li> <p>Create Component</p> <ul> <li> <p>Info : The components in an ECS (Entity-Component-System) architecture of a C++ game engine are autonomous, reusable entities that encapsulate the specific behaviour and data of a game object, enabling modular and efficient management of the game's functionalities.</p> </li> <li> <p>Instruction : To create new components you need to add yourComponent.hpp in /GameEngine/Components/yourComponent.hpp . The synthax of an abstract component must of course be respected, see example. The name of your component must also be implemented in the /GameEngine/Utils/Config.hpp file in the list of component types named CompType.</p> </li> </ul> </li> </ul> <p>yourComponent.hpp <pre><code>#include  \"../../Components/AComponent/AComponent.hpp\"\n\nnamespace GameEngine {\n\nclass yourComponent : public AComponent  {\n\npublic:\nfriend class boost::serialization::access;\nfriend class AComponent;\n\nyourComponent() : AComponent(CONFIG::CompType::yourComponent) {}\nyourComponent(CONFIG::CompType  type,  int id, \"component parameters ...\")  :  AComponent(CONFIG::CompType::POSITION), _idComponent(id), _type(type), int id, \"component parameters ...\" {}\n\nvirtual  ~yourComponent()  =  default;\n\ntemplate&lt;class  Archive&gt;\nvoid  serialize(Archive  &amp;  ar,  const  unsigned  int  version)  {\nar.template  register_type&lt;Position&gt;();\nar &amp;  boost::serialization::base_object&lt;AComponent&gt;(*this);\n\nar &amp; _idComponent;\nar &amp; _type;\nar &amp; _xPos;\nar &amp; _yPos;\n}\n\n// Setter and getter function for your components value can be implement here\n\nvirtual CONFIG::CompType getType() {return _type;};\nvirtual void setType(const CONFIG::CompType type) {_type = type;};\nvirtual int getId() {return _idComponent;};\nvirtual void setId(const int id) {_idComponent = id;};\n\nprotected:\nint _idComponent;\nCONFIG::CompType _type;\n\nprivate:\n// your components value\n};\n}\n\nBOOST_CLASS_EXPORT_KEY(GameEngine::yourComponent);\n</code></pre></p> <p></p> <ul> <li> <p>Create System</p> <ul> <li> <p>Info : The systems in the ECS architecture of a C++ game engine are independent processing modules that define the overall behaviour of the game by interacting with the entity components, allowing the game logic to be organised and controlled in a separate and extensible way.</p> </li> <li> <p>Instruction : To create new system you need to add yourSys.hpp in /GameEngine/Systems/yourSystem.hpp . The synthax of an abstract systems must of course be respected, see example. Your systems will have access to the EntityManager, which allows you to manipulate entities. It will be useful for applying your systems to the entities you want.</p> </li> </ul> </li> </ul> <p>yourSystem.hpp <pre><code>#include  \"../ASystem/ASystem.hpp\"\n// Include Components needed here\n#include  \"../../Components/Position/Position.hpp\"\n#include  \"../../Utils/Timeout.hpp\"\n#include  &lt;chrono&gt;\n#include  &lt;random&gt;\n\nnamespace GameEngine {\n\nclass yourSys : public ISystem {\n\nyourSys(std::list&lt;std::shared_ptr&lt;Entity&gt;&gt;  &amp;entityList)  :  _entities(entityList),  isRunning(true)  {}\n~yourSys()  {};\n\nvirtual  void  update()  override  {\nfor  (std::shared_ptr&lt;Entity&gt;  &amp;entityPtr  :  _entities)  {\n// check or manipulate entities by type or by components type in entities\n}\n};\n\nprivate:\nbool  isRunning;\nstd::list&lt;std::shared_ptr&lt;Entity&gt;&gt;  _entities;\n\n};\n\n}   </code></pre></p> <p>back to top</p>"}]}